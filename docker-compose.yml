name: fullstack-microservice

services:
  postgres-auth:
    image: postgres:16
    container_name: pg-auth
    environment:
      POSTGRES_DB: ${AUTH_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PG_AUTH_PORT}:5432"
    volumes:
      - pg_auth_data:/var/lib/postgresql/data
      - ./infra/postgres/auth/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${AUTH_DB}"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [core]

  postgres-orders:
    image: postgres:16
    container_name: pg-orders
    environment:
      POSTGRES_DB: ${ORDERS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PG_ORDERS_PORT}:5432"
    volumes:
      - pg_orders_data:/var/lib/postgresql/data
      - ./infra/postgres/orders/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${ORDERS_DB}"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [core]

  postgres-payments:
    image: postgres:16
    container_name: pg-payments
    environment:
      POSTGRES_DB: ${PAYMENTS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PG_PAYMENTS_PORT}:5432"
    volumes:
      - pg_payments_data:/var/lib/postgresql/data
      - ./infra/postgres/payments/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${PAYMENTS_DB}"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [core]

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [core]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [core]

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT}:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9093 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [core]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "${ES_PORT}:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
    networks: [core]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${KIBANA_PORT}:5601"
    networks: [core]

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: keycloak
    command: ["start-dev"]
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    ports:
      - "${KEYCLOAK_PORT}:8080"
    networks: [core]

  gateway:
    build:
      context: .
      dockerfile: ./backend/gateway/Dockerfile
    container_name: gateway
    depends_on:
      auth-service:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8080"
      AUTH_MODE: ${AUTH_MODE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP_MIN: ${JWT_EXP_MIN}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
      KEYCLOAK_CLIENT: ${KEYCLOAK_CLIENT}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      URL_AUTH: "http://auth-service:8080"
      URL_ORDER: "http://order-service:8081"
      URL_PAYMENT: "http://payment-service:8082"
      URL_SEARCH: "http://search-service:8083"
      URL_AI: "http://ai-service:8084"
    ports:
      - "${GATEWAY_PORT}:8080"
    networks: [core]

  auth-service:
    build:
      context: .
      dockerfile: ./backend/auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      postgres-auth:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-auth:5432/${AUTH_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP_MIN: ${JWT_EXP_MIN}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
    networks: [core]

  order-service:
    build:
      context: .
      dockerfile: ./backend/order-service/Dockerfile
    container_name: order-service
    depends_on:
      postgres-orders:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8081"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-orders:5432/${ORDERS_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
      SPRING_KAFKA_CONSUMER_GROUP: "order-service"
      ORDER_TOPIC: "order.events"
      PAYMENT_TOPIC: "payment.events"
    networks: [core]

  payment-service:
    build:
      context: .
      dockerfile: ./backend/payment-service/Dockerfile
    container_name: payment-service
    depends_on:
      postgres-payments:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8082"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-payments:5432/${PAYMENTS_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
      SPRING_KAFKA_CONSUMER_GROUP: "payment-service"
      ORDER_TOPIC: "order.events"
      PAYMENT_TOPIC: "payment.events"
    networks: [core]

  search-service:
    build:
      context: .
      dockerfile: ./backend/search-service/Dockerfile
    container_name: search-service
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8083"
      SPRING_ELASTICSEARCH_URIS: ${ELASTIC_URI}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
      SPRING_KAFKA_CONSUMER_GROUP: "search-service"
      ORDER_TOPIC: "order.events"
      ES_INDEX_ORDERS: "orders"
    networks: [core]

  ai-service:
    build:
      context: .
      dockerfile: ./backend/ai-service/Dockerfile
    container_name: ai-service
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8084"
      AI_PROVIDER: ${AI_PROVIDER}
      AI_MODEL: ${AI_MODEL}
      AI_API_BASE: ${AI_API_BASE}
      AI_API_KEY: ${AI_API_KEY}
    networks: [core]

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:80"
    networks: [core]

volumes:
  pg_auth_data:
  pg_orders_data:
  pg_payments_data:

networks:
  core:
    driver: bridge